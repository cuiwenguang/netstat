// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dummy.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DMM struct {
}

func (m *DMM) Reset()                    { *m = DMM{} }
func (m *DMM) String() string            { return proto.CompactTextString(m) }
func (*DMM) ProtoMessage()               {}
func (*DMM) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// 标记的扑克牌
type DMM_CardMark struct {
	Card   *Card `protobuf:"bytes,1,opt,name=Card" json:"Card,omitempty"`
	Type   int32 `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	IsHead bool  `protobuf:"varint,3,opt,name=IsHead" json:"IsHead,omitempty"`
}

func (m *DMM_CardMark) Reset()                    { *m = DMM_CardMark{} }
func (m *DMM_CardMark) String() string            { return proto.CompactTextString(m) }
func (*DMM_CardMark) ProtoMessage()               {}
func (*DMM_CardMark) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *DMM_CardMark) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *DMM_CardMark) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *DMM_CardMark) GetIsHead() bool {
	if m != nil {
		return m.IsHead
	}
	return false
}

// 玩家信息
type DMM_RoomPlayer struct {
	ID             int32                `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserName       string               `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	Chips          uint64               `protobuf:"varint,3,opt,name=Chips" json:"Chips,omitempty"`
	Avatar         string               `protobuf:"bytes,4,opt,name=Avatar" json:"Avatar,omitempty"`
	SeatId         int32                `protobuf:"varint,5,opt,name=SeatId" json:"SeatId,omitempty"`
	LeftCardsCount int32                `protobuf:"varint,6,opt,name=LeftCardsCount" json:"LeftCardsCount,omitempty"`
	IsBanker       bool                 `protobuf:"varint,7,opt,name=IsBanker" json:"IsBanker,omitempty"`
	Score          int32                `protobuf:"varint,8,opt,name=Score" json:"Score,omitempty"`
	HandCards      []*DMM_CardMark      `protobuf:"bytes,9,rep,name=HandCards" json:"HandCards,omitempty"`
	CardGroupInfos []*DMM_CardGroupInfo `protobuf:"bytes,10,rep,name=CardGroupInfos" json:"CardGroupInfos,omitempty"`
}

func (m *DMM_RoomPlayer) Reset()                    { *m = DMM_RoomPlayer{} }
func (m *DMM_RoomPlayer) String() string            { return proto.CompactTextString(m) }
func (*DMM_RoomPlayer) ProtoMessage()               {}
func (*DMM_RoomPlayer) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1} }

func (m *DMM_RoomPlayer) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DMM_RoomPlayer) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *DMM_RoomPlayer) GetChips() uint64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *DMM_RoomPlayer) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *DMM_RoomPlayer) GetSeatId() int32 {
	if m != nil {
		return m.SeatId
	}
	return 0
}

func (m *DMM_RoomPlayer) GetLeftCardsCount() int32 {
	if m != nil {
		return m.LeftCardsCount
	}
	return 0
}

func (m *DMM_RoomPlayer) GetIsBanker() bool {
	if m != nil {
		return m.IsBanker
	}
	return false
}

func (m *DMM_RoomPlayer) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *DMM_RoomPlayer) GetHandCards() []*DMM_CardMark {
	if m != nil {
		return m.HandCards
	}
	return nil
}

func (m *DMM_RoomPlayer) GetCardGroupInfos() []*DMM_CardGroupInfo {
	if m != nil {
		return m.CardGroupInfos
	}
	return nil
}

// 房间信息
type DMM_RoomInfo struct {
	RoomNum        int32             `protobuf:"varint,1,opt,name=RoomNum" json:"RoomNum,omitempty"`
	State          int32             `protobuf:"varint,2,opt,name=State" json:"State,omitempty"`
	LeftCardsCount int32             `protobuf:"varint,3,opt,name=LeftCardsCount" json:"LeftCardsCount,omitempty"`
	Players        []*DMM_RoomPlayer `protobuf:"bytes,4,rep,name=Players" json:"Players,omitempty"`
	DiscardCards   []*DMM_CardMark   `protobuf:"bytes,5,rep,name=DiscardCards" json:"DiscardCards,omitempty"`
	ConfigID       int32             `protobuf:"varint,6,opt,name=ConfigID" json:"ConfigID,omitempty"`
}

func (m *DMM_RoomInfo) Reset()                    { *m = DMM_RoomInfo{} }
func (m *DMM_RoomInfo) String() string            { return proto.CompactTextString(m) }
func (*DMM_RoomInfo) ProtoMessage()               {}
func (*DMM_RoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 2} }

func (m *DMM_RoomInfo) GetRoomNum() int32 {
	if m != nil {
		return m.RoomNum
	}
	return 0
}

func (m *DMM_RoomInfo) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *DMM_RoomInfo) GetLeftCardsCount() int32 {
	if m != nil {
		return m.LeftCardsCount
	}
	return 0
}

func (m *DMM_RoomInfo) GetPlayers() []*DMM_RoomPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *DMM_RoomInfo) GetDiscardCards() []*DMM_CardMark {
	if m != nil {
		return m.DiscardCards
	}
	return nil
}

func (m *DMM_RoomInfo) GetConfigID() int32 {
	if m != nil {
		return m.ConfigID
	}
	return 0
}

// 倒计时消息
type DMM_TickMsg struct {
	Type  int32 `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty"`
	Total int32 `protobuf:"varint,2,opt,name=Total" json:"Total,omitempty"`
	Cur   int32 `protobuf:"varint,3,opt,name=Cur" json:"Cur,omitempty"`
}

func (m *DMM_TickMsg) Reset()                    { *m = DMM_TickMsg{} }
func (m *DMM_TickMsg) String() string            { return proto.CompactTextString(m) }
func (*DMM_TickMsg) ProtoMessage()               {}
func (*DMM_TickMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 3} }

func (m *DMM_TickMsg) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *DMM_TickMsg) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *DMM_TickMsg) GetCur() int32 {
	if m != nil {
		return m.Cur
	}
	return 0
}

// 玩家游戏结束得分
type DMM_PlayerScore struct {
	ID             int32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Score          int32 `protobuf:"varint,2,opt,name=Score" json:"Score,omitempty"`
	WinOrLoseChips int32 `protobuf:"varint,3,opt,name=WinOrLoseChips" json:"WinOrLoseChips,omitempty"`
}

func (m *DMM_PlayerScore) Reset()                    { *m = DMM_PlayerScore{} }
func (m *DMM_PlayerScore) String() string            { return proto.CompactTextString(m) }
func (*DMM_PlayerScore) ProtoMessage()               {}
func (*DMM_PlayerScore) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 4} }

func (m *DMM_PlayerScore) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DMM_PlayerScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *DMM_PlayerScore) GetWinOrLoseChips() int32 {
	if m != nil {
		return m.WinOrLoseChips
	}
	return 0
}

// 游戏结束得分列表
type DMM_PlayerScores struct {
	GameScores []*DMM_PlayerScore `protobuf:"bytes,1,rep,name=GameScores" json:"GameScores,omitempty"`
}

func (m *DMM_PlayerScores) Reset()                    { *m = DMM_PlayerScores{} }
func (m *DMM_PlayerScores) String() string            { return proto.CompactTextString(m) }
func (*DMM_PlayerScores) ProtoMessage()               {}
func (*DMM_PlayerScores) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 5} }

func (m *DMM_PlayerScores) GetGameScores() []*DMM_PlayerScore {
	if m != nil {
		return m.GameScores
	}
	return nil
}

// 通知客户端增减分数
type DMM_ShowScores struct {
	PlayerID    int32 `protobuf:"varint,1,opt,name=PlayerID" json:"PlayerID,omitempty"`
	ScoreChange bool  `protobuf:"varint,2,opt,name=ScoreChange" json:"ScoreChange,omitempty"`
	Multiple    int32 `protobuf:"varint,3,opt,name=Multiple" json:"Multiple,omitempty"`
}

func (m *DMM_ShowScores) Reset()                    { *m = DMM_ShowScores{} }
func (m *DMM_ShowScores) String() string            { return proto.CompactTextString(m) }
func (*DMM_ShowScores) ProtoMessage()               {}
func (*DMM_ShowScores) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 6} }

func (m *DMM_ShowScores) GetPlayerID() int32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *DMM_ShowScores) GetScoreChange() bool {
	if m != nil {
		return m.ScoreChange
	}
	return false
}

func (m *DMM_ShowScores) GetMultiple() int32 {
	if m != nil {
		return m.Multiple
	}
	return 0
}

// 组牌信息请求信息
type DMM_BornInfo struct {
	HandCards    []*DMM_CardMark `protobuf:"bytes,1,rep,name=HandCards" json:"HandCards,omitempty"`
	DiscardCards []*DMM_CardMark `protobuf:"bytes,2,rep,name=DiscardCards" json:"DiscardCards,omitempty"`
	DiscardIndex int32           `protobuf:"varint,3,opt,name=DiscardIndex" json:"DiscardIndex,omitempty"`
}

func (m *DMM_BornInfo) Reset()                    { *m = DMM_BornInfo{} }
func (m *DMM_BornInfo) String() string            { return proto.CompactTextString(m) }
func (*DMM_BornInfo) ProtoMessage()               {}
func (*DMM_BornInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 7} }

func (m *DMM_BornInfo) GetHandCards() []*DMM_CardMark {
	if m != nil {
		return m.HandCards
	}
	return nil
}

func (m *DMM_BornInfo) GetDiscardCards() []*DMM_CardMark {
	if m != nil {
		return m.DiscardCards
	}
	return nil
}

func (m *DMM_BornInfo) GetDiscardIndex() int32 {
	if m != nil {
		return m.DiscardIndex
	}
	return 0
}

// 玩家手里的牌组
type DMM_CardGroup struct {
	CardMark *DMM_CardMark `protobuf:"bytes,1,opt,name=CardMark" json:"CardMark,omitempty"`
	PlayerID int32         `protobuf:"varint,2,opt,name=PlayerID" json:"PlayerID,omitempty"`
}

func (m *DMM_CardGroup) Reset()                    { *m = DMM_CardGroup{} }
func (m *DMM_CardGroup) String() string            { return proto.CompactTextString(m) }
func (*DMM_CardGroup) ProtoMessage()               {}
func (*DMM_CardGroup) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 8} }

func (m *DMM_CardGroup) GetCardMark() *DMM_CardMark {
	if m != nil {
		return m.CardMark
	}
	return nil
}

func (m *DMM_CardGroup) GetPlayerID() int32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

// 一组牌的信息
type DMM_CardGroupInfo struct {
	CardGroups []*DMM_CardGroup `protobuf:"bytes,1,rep,name=CardGroups" json:"CardGroups,omitempty"`
	Group      int32            `protobuf:"varint,2,opt,name=Group" json:"Group,omitempty"`
}

func (m *DMM_CardGroupInfo) Reset()                    { *m = DMM_CardGroupInfo{} }
func (m *DMM_CardGroupInfo) String() string            { return proto.CompactTextString(m) }
func (*DMM_CardGroupInfo) ProtoMessage()               {}
func (*DMM_CardGroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 9} }

func (m *DMM_CardGroupInfo) GetCardGroups() []*DMM_CardGroup {
	if m != nil {
		return m.CardGroups
	}
	return nil
}

func (m *DMM_CardGroupInfo) GetGroup() int32 {
	if m != nil {
		return m.Group
	}
	return 0
}

// 连牌信息
type DMM_LeaveInfo struct {
	PlayerID int32         `protobuf:"varint,1,opt,name=PlayerID" json:"PlayerID,omitempty"`
	Group    int32         `protobuf:"varint,2,opt,name=Group" json:"Group,omitempty"`
	CardMark *DMM_CardMark `protobuf:"bytes,3,opt,name=CardMark" json:"CardMark,omitempty"`
}

func (m *DMM_LeaveInfo) Reset()                    { *m = DMM_LeaveInfo{} }
func (m *DMM_LeaveInfo) String() string            { return proto.CompactTextString(m) }
func (*DMM_LeaveInfo) ProtoMessage()               {}
func (*DMM_LeaveInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 10} }

func (m *DMM_LeaveInfo) GetPlayerID() int32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *DMM_LeaveInfo) GetGroup() int32 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *DMM_LeaveInfo) GetCardMark() *DMM_CardMark {
	if m != nil {
		return m.CardMark
	}
	return nil
}

// 出牌信息
type DMM_PutCardInfo struct {
	PlayerID int32         `protobuf:"varint,1,opt,name=PlayerID" json:"PlayerID,omitempty"`
	CardMark *DMM_CardMark `protobuf:"bytes,2,opt,name=CardMark" json:"CardMark,omitempty"`
}

func (m *DMM_PutCardInfo) Reset()                    { *m = DMM_PutCardInfo{} }
func (m *DMM_PutCardInfo) String() string            { return proto.CompactTextString(m) }
func (*DMM_PutCardInfo) ProtoMessage()               {}
func (*DMM_PutCardInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 11} }

func (m *DMM_PutCardInfo) GetPlayerID() int32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *DMM_PutCardInfo) GetCardMark() *DMM_CardMark {
	if m != nil {
		return m.CardMark
	}
	return nil
}

// 扑克牌
type DMM_Cards struct {
	Cards []*DMM_CardMark `protobuf:"bytes,1,rep,name=Cards" json:"Cards,omitempty"`
}

func (m *DMM_Cards) Reset()                    { *m = DMM_Cards{} }
func (m *DMM_Cards) String() string            { return proto.CompactTextString(m) }
func (*DMM_Cards) ProtoMessage()               {}
func (*DMM_Cards) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 12} }

func (m *DMM_Cards) GetCards() []*DMM_CardMark {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 玩家倒计时通知
type DMM_PlayerTickNotify struct {
	PlayerID int32        `protobuf:"varint,1,opt,name=PlayerID" json:"PlayerID,omitempty"`
	TickMsg  *DMM_TickMsg `protobuf:"bytes,2,opt,name=TickMsg" json:"TickMsg,omitempty"`
}

func (m *DMM_PlayerTickNotify) Reset()                    { *m = DMM_PlayerTickNotify{} }
func (m *DMM_PlayerTickNotify) String() string            { return proto.CompactTextString(m) }
func (*DMM_PlayerTickNotify) ProtoMessage()               {}
func (*DMM_PlayerTickNotify) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 13} }

func (m *DMM_PlayerTickNotify) GetPlayerID() int32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *DMM_PlayerTickNotify) GetTickMsg() *DMM_TickMsg {
	if m != nil {
		return m.TickMsg
	}
	return nil
}

// 有玩家组牌通知
type DMM_BornNotify struct {
	RoomPlayer   *DMM_RoomPlayer `protobuf:"bytes,1,opt,name=RoomPlayer" json:"RoomPlayer,omitempty"`
	DiscardCards []*DMM_CardMark `protobuf:"bytes,2,rep,name=DiscardCards" json:"DiscardCards,omitempty"`
}

func (m *DMM_BornNotify) Reset()                    { *m = DMM_BornNotify{} }
func (m *DMM_BornNotify) String() string            { return proto.CompactTextString(m) }
func (*DMM_BornNotify) ProtoMessage()               {}
func (*DMM_BornNotify) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 14} }

func (m *DMM_BornNotify) GetRoomPlayer() *DMM_RoomPlayer {
	if m != nil {
		return m.RoomPlayer
	}
	return nil
}

func (m *DMM_BornNotify) GetDiscardCards() []*DMM_CardMark {
	if m != nil {
		return m.DiscardCards
	}
	return nil
}

// 玩家通知
type DMM_PlayerNotify struct {
	PlayerID int32 `protobuf:"varint,1,opt,name=PlayerID" json:"PlayerID,omitempty"`
}

func (m *DMM_PlayerNotify) Reset()                    { *m = DMM_PlayerNotify{} }
func (m *DMM_PlayerNotify) String() string            { return proto.CompactTextString(m) }
func (*DMM_PlayerNotify) ProtoMessage()               {}
func (*DMM_PlayerNotify) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 15} }

func (m *DMM_PlayerNotify) GetPlayerID() int32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

// 连牌通知
type DMM_LeaveNotify struct {
	PlayerID   int32           `protobuf:"varint,1,opt,name=PlayerID" json:"PlayerID,omitempty"`
	RoomPlayer *DMM_RoomPlayer `protobuf:"bytes,2,opt,name=RoomPlayer" json:"RoomPlayer,omitempty"`
}

func (m *DMM_LeaveNotify) Reset()                    { *m = DMM_LeaveNotify{} }
func (m *DMM_LeaveNotify) String() string            { return proto.CompactTextString(m) }
func (*DMM_LeaveNotify) ProtoMessage()               {}
func (*DMM_LeaveNotify) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 16} }

func (m *DMM_LeaveNotify) GetPlayerID() int32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *DMM_LeaveNotify) GetRoomPlayer() *DMM_RoomPlayer {
	if m != nil {
		return m.RoomPlayer
	}
	return nil
}

// 超时
type DMM_OperationTimeout struct {
}

func (m *DMM_OperationTimeout) Reset()                    { *m = DMM_OperationTimeout{} }
func (m *DMM_OperationTimeout) String() string            { return proto.CompactTextString(m) }
func (*DMM_OperationTimeout) ProtoMessage()               {}
func (*DMM_OperationTimeout) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 17} }

// 玩家分数变动
type DMM_PlayerScoreChange struct {
	PlayerID int32 `protobuf:"varint,1,opt,name=PlayerID" json:"PlayerID,omitempty"`
	Score    int32 `protobuf:"varint,2,opt,name=Score" json:"Score,omitempty"`
}

func (m *DMM_PlayerScoreChange) Reset()                    { *m = DMM_PlayerScoreChange{} }
func (m *DMM_PlayerScoreChange) String() string            { return proto.CompactTextString(m) }
func (*DMM_PlayerScoreChange) ProtoMessage()               {}
func (*DMM_PlayerScoreChange) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 18} }

func (m *DMM_PlayerScoreChange) GetPlayerID() int32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *DMM_PlayerScoreChange) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*DMM)(nil), "DMM")
	proto.RegisterType((*DMM_CardMark)(nil), "DMM.CardMark")
	proto.RegisterType((*DMM_RoomPlayer)(nil), "DMM.RoomPlayer")
	proto.RegisterType((*DMM_RoomInfo)(nil), "DMM.RoomInfo")
	proto.RegisterType((*DMM_TickMsg)(nil), "DMM.TickMsg")
	proto.RegisterType((*DMM_PlayerScore)(nil), "DMM.PlayerScore")
	proto.RegisterType((*DMM_PlayerScores)(nil), "DMM.PlayerScores")
	proto.RegisterType((*DMM_ShowScores)(nil), "DMM.ShowScores")
	proto.RegisterType((*DMM_BornInfo)(nil), "DMM.BornInfo")
	proto.RegisterType((*DMM_CardGroup)(nil), "DMM.CardGroup")
	proto.RegisterType((*DMM_CardGroupInfo)(nil), "DMM.CardGroupInfo")
	proto.RegisterType((*DMM_LeaveInfo)(nil), "DMM.LeaveInfo")
	proto.RegisterType((*DMM_PutCardInfo)(nil), "DMM.PutCardInfo")
	proto.RegisterType((*DMM_Cards)(nil), "DMM.Cards")
	proto.RegisterType((*DMM_PlayerTickNotify)(nil), "DMM.PlayerTickNotify")
	proto.RegisterType((*DMM_BornNotify)(nil), "DMM.BornNotify")
	proto.RegisterType((*DMM_PlayerNotify)(nil), "DMM.PlayerNotify")
	proto.RegisterType((*DMM_LeaveNotify)(nil), "DMM.LeaveNotify")
	proto.RegisterType((*DMM_OperationTimeout)(nil), "DMM.OperationTimeout")
	proto.RegisterType((*DMM_PlayerScoreChange)(nil), "DMM.PlayerScoreChange")
}

func init() { proto.RegisterFile("dummy.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 771 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0x95, 0x9d, 0xb8, 0x71, 0xc6, 0x6d, 0x9a, 0x6f, 0x55, 0x7d, 0x32, 0x7b, 0x15, 0x8a, 0x54,
	0xa5, 0x80, 0x0c, 0x94, 0x3b, 0xae, 0x20, 0x49, 0xd5, 0x5a, 0x6a, 0xda, 0xb2, 0x4d, 0x41, 0x2a,
	0x57, 0xdb, 0x7a, 0x93, 0x58, 0x8d, 0xbd, 0x96, 0x7f, 0x0a, 0x79, 0x09, 0x9e, 0x81, 0x6b, 0xde,
	0x82, 0xf7, 0xe0, 0x61, 0xd0, 0xae, 0x7f, 0x62, 0xa7, 0x51, 0x02, 0x77, 0x7b, 0x66, 0x67, 0xc7,
	0x67, 0x66, 0xce, 0x8c, 0xc1, 0x70, 0x12, 0xcf, 0x9b, 0x5b, 0x41, 0xc8, 0x63, 0x8e, 0x8d, 0x3b,
	0x1a, 0x3a, 0x51, 0x0a, 0xf6, 0x7f, 0xec, 0x42, 0x6d, 0x30, 0x1c, 0xe2, 0x8f, 0xa0, 0xf7, 0x69,
	0xe8, 0x0c, 0x69, 0x78, 0x8f, 0x9e, 0x40, 0x5d, 0x9c, 0x4d, 0xa5, 0xa3, 0x74, 0x8d, 0x23, 0xcd,
	0x12, 0x80, 0x48, 0x13, 0x42, 0x50, 0x1f, 0xcd, 0x03, 0x66, 0xaa, 0x1d, 0xa5, 0xab, 0x11, 0x79,
	0x46, 0xff, 0xc3, 0x96, 0x1d, 0x9d, 0x32, 0xea, 0x98, 0xb5, 0x8e, 0xd2, 0xd5, 0x49, 0x86, 0xf0,
	0x2f, 0x15, 0x80, 0x70, 0xee, 0x5d, 0xce, 0xe8, 0x9c, 0x85, 0xa8, 0x05, 0xaa, 0x3d, 0x90, 0x31,
	0x35, 0xa2, 0xda, 0x03, 0x84, 0x41, 0xbf, 0x8e, 0x58, 0x78, 0x4e, 0xbd, 0x34, 0x5c, 0x93, 0x14,
	0x18, 0xed, 0x81, 0xd6, 0x9f, 0xba, 0x41, 0x24, 0x23, 0xd6, 0x49, 0x0a, 0xc4, 0x87, 0x3e, 0x3c,
	0xd0, 0x98, 0x86, 0x66, 0x5d, 0xfa, 0x67, 0x48, 0xd8, 0xaf, 0x18, 0x8d, 0x6d, 0xc7, 0xd4, 0x64,
	0xf4, 0x0c, 0xa1, 0x03, 0x68, 0x9d, 0xb1, 0x71, 0x2c, 0x88, 0x47, 0x7d, 0x9e, 0xf8, 0xb1, 0xb9,
	0x25, 0xef, 0x97, 0xac, 0x82, 0x89, 0x1d, 0xf5, 0xa8, 0x7f, 0xcf, 0x42, 0xb3, 0x21, 0x53, 0x28,
	0xb0, 0x60, 0x72, 0x75, 0xc7, 0x43, 0x66, 0xea, 0xf2, 0x69, 0x0a, 0xd0, 0x0b, 0x68, 0x9e, 0x52,
	0xdf, 0x91, 0x31, 0xcc, 0x66, 0xa7, 0xd6, 0x35, 0x8e, 0x76, 0xac, 0xc1, 0x70, 0x68, 0xe5, 0x35,
	0x24, 0x8b, 0x7b, 0xf4, 0x0e, 0x5a, 0xe2, 0x70, 0x12, 0xf2, 0x24, 0xb0, 0xfd, 0x31, 0x8f, 0x4c,
	0x90, 0x2f, 0x50, 0xf1, 0xa2, 0xb8, 0x22, 0x4b, 0x9e, 0xf8, 0xb7, 0x02, 0xba, 0xa8, 0xa1, 0x40,
	0xc8, 0x84, 0x86, 0x38, 0x9f, 0x27, 0x5e, 0x56, 0xc6, 0x1c, 0x4a, 0x96, 0x31, 0x8d, 0xf3, 0xbe,
	0xa4, 0x60, 0x45, 0xfe, 0xb5, 0x95, 0xf9, 0x1f, 0x42, 0x23, 0xed, 0x51, 0x64, 0xd6, 0x25, 0xb3,
	0x5d, 0xc9, 0x6c, 0xd1, 0x3b, 0x92, 0xdf, 0xa3, 0x37, 0xb0, 0x3d, 0x70, 0x23, 0x21, 0xa0, 0x34,
	0x77, 0x6d, 0x55, 0xee, 0x15, 0x17, 0x51, 0xdd, 0x3e, 0xf7, 0xc7, 0xee, 0xc4, 0x1e, 0x64, 0xf5,
	0x2f, 0x30, 0x3e, 0x86, 0xc6, 0xc8, 0xbd, 0xbb, 0x1f, 0x46, 0x93, 0x42, 0x59, 0x4a, 0x49, 0x59,
	0x7b, 0xa0, 0x8d, 0x78, 0x4c, 0x67, 0x79, 0x5a, 0x12, 0xa0, 0x36, 0xd4, 0xfa, 0x49, 0x98, 0xe5,
	0x22, 0x8e, 0xf8, 0x0b, 0x18, 0x29, 0xc1, 0xb4, 0x3b, 0xcb, 0x4a, 0x2b, 0x7a, 0xa8, 0x96, 0x7b,
	0x78, 0x00, 0xad, 0xcf, 0xae, 0x7f, 0x11, 0x9e, 0xf1, 0x88, 0x2d, 0xc4, 0xa6, 0x91, 0x25, 0x2b,
	0x7e, 0x0f, 0xdb, 0xa5, 0xe0, 0x11, 0x7a, 0x0d, 0x70, 0x42, 0x3d, 0x96, 0x22, 0x53, 0x91, 0x05,
	0x68, 0xcb, 0x02, 0x94, 0xdc, 0x48, 0xc9, 0x07, 0x8f, 0x01, 0xae, 0xa6, 0xfc, 0x6b, 0xf6, 0x1e,
	0x83, 0x9e, 0x3a, 0x16, 0x1c, 0x0b, 0x8c, 0x3a, 0x60, 0x48, 0xaf, 0xfe, 0x94, 0xfa, 0x93, 0x94,
	0xaf, 0x4e, 0xca, 0x26, 0xf1, 0x7a, 0x98, 0xcc, 0x62, 0x37, 0x98, 0xb1, 0x8c, 0x6f, 0x81, 0xf1,
	0x77, 0x05, 0xf4, 0x1e, 0x0f, 0x7d, 0x29, 0x96, 0x8a, 0x44, 0x95, 0x0d, 0x12, 0x5d, 0x6e, 0xab,
	0xba, 0xb9, 0xad, 0xfb, 0xc5, 0x13, 0xdb, 0x77, 0xd8, 0xb7, 0x8c, 0x4c, 0xc5, 0x86, 0x09, 0x34,
	0x0b, 0x3d, 0xa3, 0xc3, 0xc5, 0x86, 0xc9, 0x36, 0xcb, 0x52, 0xfc, 0xc5, 0x02, 0x2a, 0x97, 0x48,
	0xad, 0x96, 0x08, 0x5f, 0xc3, 0x4e, 0x65, 0x46, 0x90, 0x05, 0x50, 0x18, 0xf2, 0x4c, 0x5b, 0xd5,
	0xd1, 0x22, 0x25, 0x0f, 0xa1, 0x06, 0x79, 0xca, 0xd5, 0x20, 0x01, 0x9e, 0x42, 0xf3, 0x8c, 0xd1,
	0x07, 0x26, 0x43, 0xae, 0x6b, 0xd1, 0xca, 0xe7, 0x95, 0xe4, 0x6a, 0x6b, 0x93, 0xc3, 0x23, 0x30,
	0x2e, 0x13, 0x39, 0x7e, 0x1b, 0xbf, 0x55, 0x8e, 0xaa, 0xae, 0x8f, 0xfa, 0x12, 0xb4, 0xb4, 0x2f,
	0xcf, 0xb2, 0xc3, 0xea, 0x9e, 0xa7, 0x77, 0xf8, 0x13, 0xb4, 0xd3, 0x8f, 0x88, 0xe9, 0x3b, 0xe7,
	0xb1, 0x3b, 0x9e, 0xaf, 0x25, 0x72, 0x50, 0xcc, 0x69, 0xc6, 0x63, 0x5b, 0x86, 0xcd, 0x6c, 0x24,
	0xbf, 0xc4, 0x01, 0x80, 0x10, 0x60, 0x16, 0xf1, 0x55, 0x79, 0xff, 0x67, 0x3d, 0x7f, 0xb4, 0x5a,
	0xca, 0xbf, 0x88, 0x7f, 0x97, 0x21, 0x7e, 0x9e, 0x4f, 0xe7, 0xe6, 0x2c, 0xf0, 0x0d, 0x18, 0xb2,
	0xc7, 0x7f, 0x91, 0x70, 0x95, 0xba, 0xba, 0x91, 0x3a, 0x46, 0xd0, 0xbe, 0x08, 0x58, 0x48, 0x63,
	0x97, 0xfb, 0x23, 0xd7, 0x63, 0x3c, 0x89, 0xf1, 0x31, 0xfc, 0x57, 0x5a, 0x09, 0x8b, 0x01, 0x5e,
	0xa7, 0xad, 0xc7, 0x8b, 0xaa, 0xf7, 0xf4, 0x46, 0x0d, 0x6e, 0x7f, 0xaa, 0xb8, 0xcf, 0x3d, 0xab,
	0x47, 0xdd, 0xb9, 0x3b, 0xa1, 0x1e, 0xb3, 0x4e, 0xb8, 0xe3, 0xb3, 0xd8, 0x1a, 0x88, 0x1f, 0xfb,
	0xed, 0x96, 0xfc, 0x99, 0xbf, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x53, 0x30, 0x43, 0xe8,
	0x07, 0x00, 0x00,
}
