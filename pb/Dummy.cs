// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dummy.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Baiyigame.Godnet.Dummy {

  /// <summary>Holder for reflection information generated from dummy.proto</summary>
  public static partial class DummyReflection {

    #region Descriptor
    /// <summary>File descriptor for dummy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DummyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtkdW1teS5wcm90bxoLY2FyZHMucHJvdG8irQsKA0RNTRo9CghDYXJkTWFy",
            "axITCgRDYXJkGAEgASgLMgUuQ2FyZBIMCgRUeXBlGAIgASgFEg4KBklzSGVh",
            "ZBgDIAEoCBrgAQoKUm9vbVBsYXllchIKCgJJRBgBIAEoBRIQCghVc2VyTmFt",
            "ZRgCIAEoCRINCgVDaGlwcxgDIAEoBBIOCgZBdmF0YXIYBCABKAkSDgoGU2Vh",
            "dElkGAUgASgFEhYKDkxlZnRDYXJkc0NvdW50GAYgASgFEhAKCElzQmFua2Vy",
            "GAcgASgIEg0KBVNjb3JlGAggASgFEiAKCUhhbmRDYXJkcxgJIAMoCzINLkRN",
            "TS5DYXJkTWFyaxIqCg5DYXJkR3JvdXBJbmZvcxgKIAMoCzISLkRNTS5DYXJk",
            "R3JvdXBJbmZvGpsBCghSb29tSW5mbxIPCgdSb29tTnVtGAEgASgFEg0KBVN0",
            "YXRlGAIgASgFEhYKDkxlZnRDYXJkc0NvdW50GAMgASgFEiAKB1BsYXllcnMY",
            "BCADKAsyDy5ETU0uUm9vbVBsYXllchIjCgxEaXNjYXJkQ2FyZHMYBSADKAsy",
            "DS5ETU0uQ2FyZE1hcmsSEAoIQ29uZmlnSUQYBiABKAUaMwoHVGlja01zZxIM",
            "CgRUeXBlGAEgASgFEg0KBVRvdGFsGAIgASgFEgsKA0N1chgDIAEoBRpACgtQ",
            "bGF5ZXJTY29yZRIKCgJJRBgBIAEoBRINCgVTY29yZRgCIAEoBRIWCg5XaW5P",
            "ckxvc2VDaGlwcxgDIAEoBRo0CgxQbGF5ZXJTY29yZXMSJAoKR2FtZVNjb3Jl",
            "cxgBIAMoCzIQLkRNTS5QbGF5ZXJTY29yZRpFCgpTaG93U2NvcmVzEhAKCFBs",
            "YXllcklEGAEgASgFEhMKC1Njb3JlQ2hhbmdlGAIgASgIEhAKCE11bHRpcGxl",
            "GAMgASgFGmcKCEJvcm5JbmZvEiAKCUhhbmRDYXJkcxgBIAMoCzINLkRNTS5D",
            "YXJkTWFyaxIjCgxEaXNjYXJkQ2FyZHMYAiADKAsyDS5ETU0uQ2FyZE1hcmsS",
            "FAoMRGlzY2FyZEluZGV4GAMgASgFGj4KCUNhcmRHcm91cBIfCghDYXJkTWFy",
            "axgBIAEoCzINLkRNTS5DYXJkTWFyaxIQCghQbGF5ZXJJRBgCIAEoBRpCCg1D",
            "YXJkR3JvdXBJbmZvEiIKCkNhcmRHcm91cHMYASADKAsyDi5ETU0uQ2FyZEdy",
            "b3VwEg0KBUdyb3VwGAIgASgFGk0KCUxlYXZlSW5mbxIQCghQbGF5ZXJJRBgB",
            "IAEoBRINCgVHcm91cBgCIAEoBRIfCghDYXJkTWFyaxgDIAEoCzINLkRNTS5D",
            "YXJkTWFyaxpACgtQdXRDYXJkSW5mbxIQCghQbGF5ZXJJRBgBIAEoBRIfCghD",
            "YXJkTWFyaxgCIAEoCzINLkRNTS5DYXJkTWFyaxolCgVDYXJkcxIcCgVDYXJk",
            "cxgBIAMoCzINLkRNTS5DYXJkTWFyaxpDChBQbGF5ZXJUaWNrTm90aWZ5EhAK",
            "CFBsYXllcklEGAEgASgFEh0KB1RpY2tNc2cYAiABKAsyDC5ETU0uVGlja01z",
            "ZxpWCgpCb3JuTm90aWZ5EiMKClJvb21QbGF5ZXIYASABKAsyDy5ETU0uUm9v",
            "bVBsYXllchIjCgxEaXNjYXJkQ2FyZHMYAiADKAsyDS5ETU0uQ2FyZE1hcmsa",
            "IAoMUGxheWVyTm90aWZ5EhAKCFBsYXllcklEGAEgASgFGkQKC0xlYXZlTm90",
            "aWZ5EhAKCFBsYXllcklEGAEgASgFEiMKClJvb21QbGF5ZXIYAiABKAsyDy5E",
            "TU0uUm9vbVBsYXllchoSChBPcGVyYXRpb25UaW1lb3V0GjQKEVBsYXllclNj",
            "b3JlQ2hhbmdlEhAKCFBsYXllcklEGAEgASgFEg0KBVNjb3JlGAIgASgFQiFa",
            "AnBiqgIaQ29tLkJhaXlpZ2FtZS5Hb2RuZXQuRHVtbXliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.Baiyigame.Godnet.Comm.CardsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM), global::Com.Baiyigame.Godnet.Dummy.DMM.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark.Parser, new[]{ "Card", "Type", "IsHead" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer.Parser, new[]{ "ID", "UserName", "Chips", "Avatar", "SeatId", "LeftCardsCount", "IsBanker", "Score", "HandCards", "CardGroupInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomInfo), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomInfo.Parser, new[]{ "RoomNum", "State", "LeftCardsCount", "Players", "DiscardCards", "ConfigID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.TickMsg), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.TickMsg.Parser, new[]{ "Type", "Total", "Cur" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerScore), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerScore.Parser, new[]{ "ID", "Score", "WinOrLoseChips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerScores), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerScores.Parser, new[]{ "GameScores" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.ShowScores), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.ShowScores.Parser, new[]{ "PlayerID", "ScoreChange", "Multiple" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.BornInfo), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.BornInfo.Parser, new[]{ "HandCards", "DiscardCards", "DiscardIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroup), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroup.Parser, new[]{ "CardMark", "PlayerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroupInfo), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroupInfo.Parser, new[]{ "CardGroups", "Group" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.LeaveInfo), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.LeaveInfo.Parser, new[]{ "PlayerID", "Group", "CardMark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PutCardInfo), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PutCardInfo.Parser, new[]{ "PlayerID", "CardMark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.Cards), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.Cards.Parser, new[]{ "Cards_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerTickNotify), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerTickNotify.Parser, new[]{ "PlayerID", "TickMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.BornNotify), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.BornNotify.Parser, new[]{ "RoomPlayer", "DiscardCards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerNotify), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerNotify.Parser, new[]{ "PlayerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.LeaveNotify), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.LeaveNotify.Parser, new[]{ "PlayerID", "RoomPlayer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.OperationTimeout), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.OperationTimeout.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerScoreChange), global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerScoreChange.Parser, new[]{ "PlayerID", "Score" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DMM : pb::IMessage<DMM> {
    private static readonly pb::MessageParser<DMM> _parser = new pb::MessageParser<DMM>(() => new DMM());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DMM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Baiyigame.Godnet.Dummy.DummyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DMM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DMM(DMM other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DMM Clone() {
      return new DMM(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DMM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DMM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DMM other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DMM message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// 标记的扑克牌
      /// </summary>
      public sealed partial class CardMark : pb::IMessage<CardMark> {
        private static readonly pb::MessageParser<CardMark> _parser = new pb::MessageParser<CardMark>(() => new CardMark());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardMark> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardMark() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardMark(CardMark other) : this() {
          Card = other.card_ != null ? other.Card.Clone() : null;
          type_ = other.type_;
          isHead_ = other.isHead_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardMark Clone() {
          return new CardMark(this);
        }

        /// <summary>Field number for the "Card" field.</summary>
        public const int CardFieldNumber = 1;
        private global::Com.Baiyigame.Godnet.Comm.Card card_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Baiyigame.Godnet.Comm.Card Card {
          get { return card_; }
          set {
            card_ = value;
          }
        }

        /// <summary>Field number for the "Type" field.</summary>
        public const int TypeFieldNumber = 2;
        private int type_;
        /// <summary>
        /// 0:手牌 1:头牌 2:特殊牌
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "IsHead" field.</summary>
        public const int IsHeadFieldNumber = 3;
        private bool isHead_;
        /// <summary>
        /// 是否是头牌
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsHead {
          get { return isHead_; }
          set {
            isHead_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardMark);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardMark other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Card, other.Card)) return false;
          if (Type != other.Type) return false;
          if (IsHead != other.IsHead) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (card_ != null) hash ^= Card.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (IsHead != false) hash ^= IsHead.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (card_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Card);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Type);
          }
          if (IsHead != false) {
            output.WriteRawTag(24);
            output.WriteBool(IsHead);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (card_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
          }
          if (IsHead != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardMark other) {
          if (other == null) {
            return;
          }
          if (other.card_ != null) {
            if (card_ == null) {
              card_ = new global::Com.Baiyigame.Godnet.Comm.Card();
            }
            Card.MergeFrom(other.Card);
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.IsHead != false) {
            IsHead = other.IsHead;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (card_ == null) {
                  card_ = new global::Com.Baiyigame.Godnet.Comm.Card();
                }
                input.ReadMessage(card_);
                break;
              }
              case 16: {
                Type = input.ReadInt32();
                break;
              }
              case 24: {
                IsHead = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 玩家信息
      /// </summary>
      public sealed partial class RoomPlayer : pb::IMessage<RoomPlayer> {
        private static readonly pb::MessageParser<RoomPlayer> _parser = new pb::MessageParser<RoomPlayer>(() => new RoomPlayer());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RoomPlayer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomPlayer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomPlayer(RoomPlayer other) : this() {
          iD_ = other.iD_;
          userName_ = other.userName_;
          chips_ = other.chips_;
          avatar_ = other.avatar_;
          seatId_ = other.seatId_;
          leftCardsCount_ = other.leftCardsCount_;
          isBanker_ = other.isBanker_;
          score_ = other.score_;
          handCards_ = other.handCards_.Clone();
          cardGroupInfos_ = other.cardGroupInfos_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomPlayer Clone() {
          return new RoomPlayer(this);
        }

        /// <summary>Field number for the "ID" field.</summary>
        public const int IDFieldNumber = 1;
        private int iD_;
        /// <summary>
        /// id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ID {
          get { return iD_; }
          set {
            iD_ = value;
          }
        }

        /// <summary>Field number for the "UserName" field.</summary>
        public const int UserNameFieldNumber = 2;
        private string userName_ = "";
        /// <summary>
        /// 姓名
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserName {
          get { return userName_; }
          set {
            userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Chips" field.</summary>
        public const int ChipsFieldNumber = 3;
        private ulong chips_;
        /// <summary>
        /// 筹码
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Chips {
          get { return chips_; }
          set {
            chips_ = value;
          }
        }

        /// <summary>Field number for the "Avatar" field.</summary>
        public const int AvatarFieldNumber = 4;
        private string avatar_ = "";
        /// <summary>
        /// 头像
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Avatar {
          get { return avatar_; }
          set {
            avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "SeatId" field.</summary>
        public const int SeatIdFieldNumber = 5;
        private int seatId_;
        /// <summary>
        /// 座位号(1~4) 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SeatId {
          get { return seatId_; }
          set {
            seatId_ = value;
          }
        }

        /// <summary>Field number for the "LeftCardsCount" field.</summary>
        public const int LeftCardsCountFieldNumber = 6;
        private int leftCardsCount_;
        /// <summary>
        /// 剩余牌的数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int LeftCardsCount {
          get { return leftCardsCount_; }
          set {
            leftCardsCount_ = value;
          }
        }

        /// <summary>Field number for the "IsBanker" field.</summary>
        public const int IsBankerFieldNumber = 7;
        private bool isBanker_;
        /// <summary>
        /// 是否是庄家
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsBanker {
          get { return isBanker_; }
          set {
            isBanker_ = value;
          }
        }

        /// <summary>Field number for the "Score" field.</summary>
        public const int ScoreFieldNumber = 8;
        private int score_;
        /// <summary>
        /// 玩家分数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Score {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        /// <summary>Field number for the "HandCards" field.</summary>
        public const int HandCardsFieldNumber = 9;
        private static readonly pb::FieldCodec<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> _repeated_handCards_codec
            = pb::FieldCodec.ForMessage(74, global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark.Parser);
        private readonly pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> handCards_ = new pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark>();
        /// <summary>
        /// 玩家的手牌（只有自己可见）
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> HandCards {
          get { return handCards_; }
        }

        /// <summary>Field number for the "CardGroupInfos" field.</summary>
        public const int CardGroupInfosFieldNumber = 10;
        private static readonly pb::FieldCodec<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroupInfo> _repeated_cardGroupInfos_codec
            = pb::FieldCodec.ForMessage(82, global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroupInfo.Parser);
        private readonly pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroupInfo> cardGroupInfos_ = new pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroupInfo>();
        /// <summary>
        /// 玩家自己组好的牌（其余玩家可见）
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroupInfo> CardGroupInfos {
          get { return cardGroupInfos_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RoomPlayer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RoomPlayer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ID != other.ID) return false;
          if (UserName != other.UserName) return false;
          if (Chips != other.Chips) return false;
          if (Avatar != other.Avatar) return false;
          if (SeatId != other.SeatId) return false;
          if (LeftCardsCount != other.LeftCardsCount) return false;
          if (IsBanker != other.IsBanker) return false;
          if (Score != other.Score) return false;
          if(!handCards_.Equals(other.handCards_)) return false;
          if(!cardGroupInfos_.Equals(other.cardGroupInfos_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ID != 0) hash ^= ID.GetHashCode();
          if (UserName.Length != 0) hash ^= UserName.GetHashCode();
          if (Chips != 0UL) hash ^= Chips.GetHashCode();
          if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
          if (SeatId != 0) hash ^= SeatId.GetHashCode();
          if (LeftCardsCount != 0) hash ^= LeftCardsCount.GetHashCode();
          if (IsBanker != false) hash ^= IsBanker.GetHashCode();
          if (Score != 0) hash ^= Score.GetHashCode();
          hash ^= handCards_.GetHashCode();
          hash ^= cardGroupInfos_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ID != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ID);
          }
          if (UserName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(UserName);
          }
          if (Chips != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Chips);
          }
          if (Avatar.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Avatar);
          }
          if (SeatId != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(SeatId);
          }
          if (LeftCardsCount != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(LeftCardsCount);
          }
          if (IsBanker != false) {
            output.WriteRawTag(56);
            output.WriteBool(IsBanker);
          }
          if (Score != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(Score);
          }
          handCards_.WriteTo(output, _repeated_handCards_codec);
          cardGroupInfos_.WriteTo(output, _repeated_cardGroupInfos_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
          }
          if (UserName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
          }
          if (Chips != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Chips);
          }
          if (Avatar.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
          }
          if (SeatId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
          }
          if (LeftCardsCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCardsCount);
          }
          if (IsBanker != false) {
            size += 1 + 1;
          }
          if (Score != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
          }
          size += handCards_.CalculateSize(_repeated_handCards_codec);
          size += cardGroupInfos_.CalculateSize(_repeated_cardGroupInfos_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RoomPlayer other) {
          if (other == null) {
            return;
          }
          if (other.ID != 0) {
            ID = other.ID;
          }
          if (other.UserName.Length != 0) {
            UserName = other.UserName;
          }
          if (other.Chips != 0UL) {
            Chips = other.Chips;
          }
          if (other.Avatar.Length != 0) {
            Avatar = other.Avatar;
          }
          if (other.SeatId != 0) {
            SeatId = other.SeatId;
          }
          if (other.LeftCardsCount != 0) {
            LeftCardsCount = other.LeftCardsCount;
          }
          if (other.IsBanker != false) {
            IsBanker = other.IsBanker;
          }
          if (other.Score != 0) {
            Score = other.Score;
          }
          handCards_.Add(other.handCards_);
          cardGroupInfos_.Add(other.cardGroupInfos_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ID = input.ReadInt32();
                break;
              }
              case 18: {
                UserName = input.ReadString();
                break;
              }
              case 24: {
                Chips = input.ReadUInt64();
                break;
              }
              case 34: {
                Avatar = input.ReadString();
                break;
              }
              case 40: {
                SeatId = input.ReadInt32();
                break;
              }
              case 48: {
                LeftCardsCount = input.ReadInt32();
                break;
              }
              case 56: {
                IsBanker = input.ReadBool();
                break;
              }
              case 64: {
                Score = input.ReadInt32();
                break;
              }
              case 74: {
                handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
                break;
              }
              case 82: {
                cardGroupInfos_.AddEntriesFrom(input, _repeated_cardGroupInfos_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 房间信息
      /// </summary>
      public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
        private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomInfo(RoomInfo other) : this() {
          roomNum_ = other.roomNum_;
          state_ = other.state_;
          leftCardsCount_ = other.leftCardsCount_;
          players_ = other.players_.Clone();
          discardCards_ = other.discardCards_.Clone();
          configID_ = other.configID_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomInfo Clone() {
          return new RoomInfo(this);
        }

        /// <summary>Field number for the "RoomNum" field.</summary>
        public const int RoomNumFieldNumber = 1;
        private int roomNum_;
        /// <summary>
        /// 房间号
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RoomNum {
          get { return roomNum_; }
          set {
            roomNum_ = value;
          }
        }

        /// <summary>Field number for the "State" field.</summary>
        public const int StateFieldNumber = 2;
        private int state_;
        /// <summary>
        /// 房间状态 （0:等待 1:开始）
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        /// <summary>Field number for the "LeftCardsCount" field.</summary>
        public const int LeftCardsCountFieldNumber = 3;
        private int leftCardsCount_;
        /// <summary>
        /// 剩余牌的数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int LeftCardsCount {
          get { return leftCardsCount_; }
          set {
            leftCardsCount_ = value;
          }
        }

        /// <summary>Field number for the "Players" field.</summary>
        public const int PlayersFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer> _repeated_players_codec
            = pb::FieldCodec.ForMessage(34, global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer.Parser);
        private readonly pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer> players_ = new pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer>();
        /// <summary>
        /// 房间玩家
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer> Players {
          get { return players_; }
        }

        /// <summary>Field number for the "DiscardCards" field.</summary>
        public const int DiscardCardsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> _repeated_discardCards_codec
            = pb::FieldCodec.ForMessage(42, global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark.Parser);
        private readonly pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> discardCards_ = new pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> DiscardCards {
          get { return discardCards_; }
        }

        /// <summary>Field number for the "ConfigID" field.</summary>
        public const int ConfigIDFieldNumber = 6;
        private int configID_;
        /// <summary>
        /// 房间配置ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ConfigID {
          get { return configID_; }
          set {
            configID_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RoomInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RoomInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RoomNum != other.RoomNum) return false;
          if (State != other.State) return false;
          if (LeftCardsCount != other.LeftCardsCount) return false;
          if(!players_.Equals(other.players_)) return false;
          if(!discardCards_.Equals(other.discardCards_)) return false;
          if (ConfigID != other.ConfigID) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RoomNum != 0) hash ^= RoomNum.GetHashCode();
          if (State != 0) hash ^= State.GetHashCode();
          if (LeftCardsCount != 0) hash ^= LeftCardsCount.GetHashCode();
          hash ^= players_.GetHashCode();
          hash ^= discardCards_.GetHashCode();
          if (ConfigID != 0) hash ^= ConfigID.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoomNum != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(RoomNum);
          }
          if (State != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(State);
          }
          if (LeftCardsCount != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(LeftCardsCount);
          }
          players_.WriteTo(output, _repeated_players_codec);
          discardCards_.WriteTo(output, _repeated_discardCards_codec);
          if (ConfigID != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(ConfigID);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoomNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomNum);
          }
          if (State != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
          }
          if (LeftCardsCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCardsCount);
          }
          size += players_.CalculateSize(_repeated_players_codec);
          size += discardCards_.CalculateSize(_repeated_discardCards_codec);
          if (ConfigID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigID);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RoomInfo other) {
          if (other == null) {
            return;
          }
          if (other.RoomNum != 0) {
            RoomNum = other.RoomNum;
          }
          if (other.State != 0) {
            State = other.State;
          }
          if (other.LeftCardsCount != 0) {
            LeftCardsCount = other.LeftCardsCount;
          }
          players_.Add(other.players_);
          discardCards_.Add(other.discardCards_);
          if (other.ConfigID != 0) {
            ConfigID = other.ConfigID;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoomNum = input.ReadInt32();
                break;
              }
              case 16: {
                State = input.ReadInt32();
                break;
              }
              case 24: {
                LeftCardsCount = input.ReadInt32();
                break;
              }
              case 34: {
                players_.AddEntriesFrom(input, _repeated_players_codec);
                break;
              }
              case 42: {
                discardCards_.AddEntriesFrom(input, _repeated_discardCards_codec);
                break;
              }
              case 48: {
                ConfigID = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 倒计时消息
      /// </summary>
      public sealed partial class TickMsg : pb::IMessage<TickMsg> {
        private static readonly pb::MessageParser<TickMsg> _parser = new pb::MessageParser<TickMsg>(() => new TickMsg());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TickMsg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TickMsg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TickMsg(TickMsg other) : this() {
          type_ = other.type_;
          total_ = other.total_;
          cur_ = other.cur_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TickMsg Clone() {
          return new TickMsg(this);
        }

        /// <summary>Field number for the "Type" field.</summary>
        public const int TypeFieldNumber = 1;
        private int type_;
        /// <summary>
        /// 倒计时类型
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "Total" field.</summary>
        public const int TotalFieldNumber = 2;
        private int total_;
        /// <summary>
        /// 总时长
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Total {
          get { return total_; }
          set {
            total_ = value;
          }
        }

        /// <summary>Field number for the "Cur" field.</summary>
        public const int CurFieldNumber = 3;
        private int cur_;
        /// <summary>
        /// 当前倒计时
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Cur {
          get { return cur_; }
          set {
            cur_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TickMsg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TickMsg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Total != other.Total) return false;
          if (Cur != other.Cur) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Total != 0) hash ^= Total.GetHashCode();
          if (Cur != 0) hash ^= Cur.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Type);
          }
          if (Total != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Total);
          }
          if (Cur != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Cur);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
          }
          if (Total != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
          }
          if (Cur != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cur);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TickMsg other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Total != 0) {
            Total = other.Total;
          }
          if (other.Cur != 0) {
            Cur = other.Cur;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Type = input.ReadInt32();
                break;
              }
              case 16: {
                Total = input.ReadInt32();
                break;
              }
              case 24: {
                Cur = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 玩家游戏结束得分
      /// </summary>
      public sealed partial class PlayerScore : pb::IMessage<PlayerScore> {
        private static readonly pb::MessageParser<PlayerScore> _parser = new pb::MessageParser<PlayerScore>(() => new PlayerScore());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerScore> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerScore() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerScore(PlayerScore other) : this() {
          iD_ = other.iD_;
          score_ = other.score_;
          winOrLoseChips_ = other.winOrLoseChips_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerScore Clone() {
          return new PlayerScore(this);
        }

        /// <summary>Field number for the "ID" field.</summary>
        public const int IDFieldNumber = 1;
        private int iD_;
        /// <summary>
        /// 玩家id 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ID {
          get { return iD_; }
          set {
            iD_ = value;
          }
        }

        /// <summary>Field number for the "Score" field.</summary>
        public const int ScoreFieldNumber = 2;
        private int score_;
        /// <summary>
        /// 玩家获得的分数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Score {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        /// <summary>Field number for the "WinOrLoseChips" field.</summary>
        public const int WinOrLoseChipsFieldNumber = 3;
        private int winOrLoseChips_;
        /// <summary>
        /// 正数为赢取筹码，负数为失去筹码
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int WinOrLoseChips {
          get { return winOrLoseChips_; }
          set {
            winOrLoseChips_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerScore);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerScore other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ID != other.ID) return false;
          if (Score != other.Score) return false;
          if (WinOrLoseChips != other.WinOrLoseChips) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ID != 0) hash ^= ID.GetHashCode();
          if (Score != 0) hash ^= Score.GetHashCode();
          if (WinOrLoseChips != 0) hash ^= WinOrLoseChips.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ID != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ID);
          }
          if (Score != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Score);
          }
          if (WinOrLoseChips != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(WinOrLoseChips);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
          }
          if (Score != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
          }
          if (WinOrLoseChips != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinOrLoseChips);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerScore other) {
          if (other == null) {
            return;
          }
          if (other.ID != 0) {
            ID = other.ID;
          }
          if (other.Score != 0) {
            Score = other.Score;
          }
          if (other.WinOrLoseChips != 0) {
            WinOrLoseChips = other.WinOrLoseChips;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ID = input.ReadInt32();
                break;
              }
              case 16: {
                Score = input.ReadInt32();
                break;
              }
              case 24: {
                WinOrLoseChips = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 游戏结束得分列表
      /// </summary>
      public sealed partial class PlayerScores : pb::IMessage<PlayerScores> {
        private static readonly pb::MessageParser<PlayerScores> _parser = new pb::MessageParser<PlayerScores>(() => new PlayerScores());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerScores> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerScores() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerScores(PlayerScores other) : this() {
          gameScores_ = other.gameScores_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerScores Clone() {
          return new PlayerScores(this);
        }

        /// <summary>Field number for the "GameScores" field.</summary>
        public const int GameScoresFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerScore> _repeated_gameScores_codec
            = pb::FieldCodec.ForMessage(10, global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerScore.Parser);
        private readonly pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerScore> gameScores_ = new pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerScore>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.PlayerScore> GameScores {
          get { return gameScores_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerScores);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerScores other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!gameScores_.Equals(other.gameScores_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= gameScores_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          gameScores_.WriteTo(output, _repeated_gameScores_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += gameScores_.CalculateSize(_repeated_gameScores_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerScores other) {
          if (other == null) {
            return;
          }
          gameScores_.Add(other.gameScores_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                gameScores_.AddEntriesFrom(input, _repeated_gameScores_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 通知客户端增减分数
      /// </summary>
      public sealed partial class ShowScores : pb::IMessage<ShowScores> {
        private static readonly pb::MessageParser<ShowScores> _parser = new pb::MessageParser<ShowScores>(() => new ShowScores());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ShowScores> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShowScores() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShowScores(ShowScores other) : this() {
          playerID_ = other.playerID_;
          scoreChange_ = other.scoreChange_;
          multiple_ = other.multiple_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShowScores Clone() {
          return new ShowScores(this);
        }

        /// <summary>Field number for the "PlayerID" field.</summary>
        public const int PlayerIDFieldNumber = 1;
        private int playerID_;
        /// <summary>
        /// 玩家ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerID {
          get { return playerID_; }
          set {
            playerID_ = value;
          }
        }

        /// <summary>Field number for the "ScoreChange" field.</summary>
        public const int ScoreChangeFieldNumber = 2;
        private bool scoreChange_;
        /// <summary>
        /// 判断加减分，True=加分，False=减分
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ScoreChange {
          get { return scoreChange_; }
          set {
            scoreChange_ = value;
          }
        }

        /// <summary>Field number for the "Multiple" field.</summary>
        public const int MultipleFieldNumber = 3;
        private int multiple_;
        /// <summary>
        /// 判断加减分倍数， 1, 2, 4倍可选
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Multiple {
          get { return multiple_; }
          set {
            multiple_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ShowScores);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ShowScores other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerID != other.PlayerID) return false;
          if (ScoreChange != other.ScoreChange) return false;
          if (Multiple != other.Multiple) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
          if (ScoreChange != false) hash ^= ScoreChange.GetHashCode();
          if (Multiple != 0) hash ^= Multiple.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerID != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerID);
          }
          if (ScoreChange != false) {
            output.WriteRawTag(16);
            output.WriteBool(ScoreChange);
          }
          if (Multiple != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Multiple);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
          }
          if (ScoreChange != false) {
            size += 1 + 1;
          }
          if (Multiple != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ShowScores other) {
          if (other == null) {
            return;
          }
          if (other.PlayerID != 0) {
            PlayerID = other.PlayerID;
          }
          if (other.ScoreChange != false) {
            ScoreChange = other.ScoreChange;
          }
          if (other.Multiple != 0) {
            Multiple = other.Multiple;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PlayerID = input.ReadInt32();
                break;
              }
              case 16: {
                ScoreChange = input.ReadBool();
                break;
              }
              case 24: {
                Multiple = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 组牌信息请求信息
      /// </summary>
      public sealed partial class BornInfo : pb::IMessage<BornInfo> {
        private static readonly pb::MessageParser<BornInfo> _parser = new pb::MessageParser<BornInfo>(() => new BornInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BornInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BornInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BornInfo(BornInfo other) : this() {
          handCards_ = other.handCards_.Clone();
          discardCards_ = other.discardCards_.Clone();
          discardIndex_ = other.discardIndex_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BornInfo Clone() {
          return new BornInfo(this);
        }

        /// <summary>Field number for the "HandCards" field.</summary>
        public const int HandCardsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> _repeated_handCards_codec
            = pb::FieldCodec.ForMessage(10, global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark.Parser);
        private readonly pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> handCards_ = new pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark>();
        /// <summary>
        /// 玩家手牌中需要组牌的牌
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> HandCards {
          get { return handCards_; }
        }

        /// <summary>Field number for the "DiscardCards" field.</summary>
        public const int DiscardCardsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> _repeated_discardCards_codec
            = pb::FieldCodec.ForMessage(18, global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark.Parser);
        private readonly pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> discardCards_ = new pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark>();
        /// <summary>
        /// 弃牌区中需要组的牌
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> DiscardCards {
          get { return discardCards_; }
        }

        /// <summary>Field number for the "DiscardIndex" field.</summary>
        public const int DiscardIndexFieldNumber = 3;
        private int discardIndex_;
        /// <summary>
        /// 弃牌区中玩家所选择的牌的索引 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DiscardIndex {
          get { return discardIndex_; }
          set {
            discardIndex_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BornInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BornInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!handCards_.Equals(other.handCards_)) return false;
          if(!discardCards_.Equals(other.discardCards_)) return false;
          if (DiscardIndex != other.DiscardIndex) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= handCards_.GetHashCode();
          hash ^= discardCards_.GetHashCode();
          if (DiscardIndex != 0) hash ^= DiscardIndex.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          handCards_.WriteTo(output, _repeated_handCards_codec);
          discardCards_.WriteTo(output, _repeated_discardCards_codec);
          if (DiscardIndex != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(DiscardIndex);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += handCards_.CalculateSize(_repeated_handCards_codec);
          size += discardCards_.CalculateSize(_repeated_discardCards_codec);
          if (DiscardIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiscardIndex);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BornInfo other) {
          if (other == null) {
            return;
          }
          handCards_.Add(other.handCards_);
          discardCards_.Add(other.discardCards_);
          if (other.DiscardIndex != 0) {
            DiscardIndex = other.DiscardIndex;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
                break;
              }
              case 18: {
                discardCards_.AddEntriesFrom(input, _repeated_discardCards_codec);
                break;
              }
              case 24: {
                DiscardIndex = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 玩家手里的牌组
      /// </summary>
      public sealed partial class CardGroup : pb::IMessage<CardGroup> {
        private static readonly pb::MessageParser<CardGroup> _parser = new pb::MessageParser<CardGroup>(() => new CardGroup());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardGroup() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardGroup(CardGroup other) : this() {
          CardMark = other.cardMark_ != null ? other.CardMark.Clone() : null;
          playerID_ = other.playerID_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardGroup Clone() {
          return new CardGroup(this);
        }

        /// <summary>Field number for the "CardMark" field.</summary>
        public const int CardMarkFieldNumber = 1;
        private global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark cardMark_;
        /// <summary>
        /// 玩家手牌中需要组牌的牌
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark CardMark {
          get { return cardMark_; }
          set {
            cardMark_ = value;
          }
        }

        /// <summary>Field number for the "PlayerID" field.</summary>
        public const int PlayerIDFieldNumber = 2;
        private int playerID_;
        /// <summary>
        /// 组牌中牌属于哪个玩家 （其他玩家会连牌到玩家的牌组里面）
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerID {
          get { return playerID_; }
          set {
            playerID_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardGroup other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(CardMark, other.CardMark)) return false;
          if (PlayerID != other.PlayerID) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (cardMark_ != null) hash ^= CardMark.GetHashCode();
          if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (cardMark_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(CardMark);
          }
          if (PlayerID != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(PlayerID);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (cardMark_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardMark);
          }
          if (PlayerID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardGroup other) {
          if (other == null) {
            return;
          }
          if (other.cardMark_ != null) {
            if (cardMark_ == null) {
              cardMark_ = new global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark();
            }
            CardMark.MergeFrom(other.CardMark);
          }
          if (other.PlayerID != 0) {
            PlayerID = other.PlayerID;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (cardMark_ == null) {
                  cardMark_ = new global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark();
                }
                input.ReadMessage(cardMark_);
                break;
              }
              case 16: {
                PlayerID = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 一组牌的信息
      /// </summary>
      public sealed partial class CardGroupInfo : pb::IMessage<CardGroupInfo> {
        private static readonly pb::MessageParser<CardGroupInfo> _parser = new pb::MessageParser<CardGroupInfo>(() => new CardGroupInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardGroupInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardGroupInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardGroupInfo(CardGroupInfo other) : this() {
          cardGroups_ = other.cardGroups_.Clone();
          group_ = other.group_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardGroupInfo Clone() {
          return new CardGroupInfo(this);
        }

        /// <summary>Field number for the "CardGroups" field.</summary>
        public const int CardGroupsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroup> _repeated_cardGroups_codec
            = pb::FieldCodec.ForMessage(10, global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroup.Parser);
        private readonly pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroup> cardGroups_ = new pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroup>();
        /// <summary>
        /// 玩家手牌中牌组
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardGroup> CardGroups {
          get { return cardGroups_; }
        }

        /// <summary>Field number for the "Group" field.</summary>
        public const int GroupFieldNumber = 2;
        private int group_;
        /// <summary>
        /// 玩家有多个组牌 属于第几组
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Group {
          get { return group_; }
          set {
            group_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardGroupInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardGroupInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!cardGroups_.Equals(other.cardGroups_)) return false;
          if (Group != other.Group) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= cardGroups_.GetHashCode();
          if (Group != 0) hash ^= Group.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          cardGroups_.WriteTo(output, _repeated_cardGroups_codec);
          if (Group != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Group);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += cardGroups_.CalculateSize(_repeated_cardGroups_codec);
          if (Group != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardGroupInfo other) {
          if (other == null) {
            return;
          }
          cardGroups_.Add(other.cardGroups_);
          if (other.Group != 0) {
            Group = other.Group;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                cardGroups_.AddEntriesFrom(input, _repeated_cardGroups_codec);
                break;
              }
              case 16: {
                Group = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 连牌信息
      /// </summary>
      public sealed partial class LeaveInfo : pb::IMessage<LeaveInfo> {
        private static readonly pb::MessageParser<LeaveInfo> _parser = new pb::MessageParser<LeaveInfo>(() => new LeaveInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LeaveInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaveInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaveInfo(LeaveInfo other) : this() {
          playerID_ = other.playerID_;
          group_ = other.group_;
          CardMark = other.cardMark_ != null ? other.CardMark.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaveInfo Clone() {
          return new LeaveInfo(this);
        }

        /// <summary>Field number for the "PlayerID" field.</summary>
        public const int PlayerIDFieldNumber = 1;
        private int playerID_;
        /// <summary>
        /// 连哪个玩家的组牌
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerID {
          get { return playerID_; }
          set {
            playerID_ = value;
          }
        }

        /// <summary>Field number for the "Group" field.</summary>
        public const int GroupFieldNumber = 2;
        private int group_;
        /// <summary>
        /// 取玩家手牌中的第几组连牌
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Group {
          get { return group_; }
          set {
            group_ = value;
          }
        }

        /// <summary>Field number for the "CardMark" field.</summary>
        public const int CardMarkFieldNumber = 3;
        private global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark cardMark_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark CardMark {
          get { return cardMark_; }
          set {
            cardMark_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LeaveInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LeaveInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerID != other.PlayerID) return false;
          if (Group != other.Group) return false;
          if (!object.Equals(CardMark, other.CardMark)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
          if (Group != 0) hash ^= Group.GetHashCode();
          if (cardMark_ != null) hash ^= CardMark.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerID != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerID);
          }
          if (Group != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Group);
          }
          if (cardMark_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(CardMark);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
          }
          if (Group != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
          }
          if (cardMark_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardMark);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LeaveInfo other) {
          if (other == null) {
            return;
          }
          if (other.PlayerID != 0) {
            PlayerID = other.PlayerID;
          }
          if (other.Group != 0) {
            Group = other.Group;
          }
          if (other.cardMark_ != null) {
            if (cardMark_ == null) {
              cardMark_ = new global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark();
            }
            CardMark.MergeFrom(other.CardMark);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PlayerID = input.ReadInt32();
                break;
              }
              case 16: {
                Group = input.ReadInt32();
                break;
              }
              case 26: {
                if (cardMark_ == null) {
                  cardMark_ = new global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark();
                }
                input.ReadMessage(cardMark_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 出牌信息
      /// </summary>
      public sealed partial class PutCardInfo : pb::IMessage<PutCardInfo> {
        private static readonly pb::MessageParser<PutCardInfo> _parser = new pb::MessageParser<PutCardInfo>(() => new PutCardInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PutCardInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PutCardInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PutCardInfo(PutCardInfo other) : this() {
          playerID_ = other.playerID_;
          CardMark = other.cardMark_ != null ? other.CardMark.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PutCardInfo Clone() {
          return new PutCardInfo(this);
        }

        /// <summary>Field number for the "PlayerID" field.</summary>
        public const int PlayerIDFieldNumber = 1;
        private int playerID_;
        /// <summary>
        /// 玩家id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerID {
          get { return playerID_; }
          set {
            playerID_ = value;
          }
        }

        /// <summary>Field number for the "CardMark" field.</summary>
        public const int CardMarkFieldNumber = 2;
        private global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark cardMark_;
        /// <summary>
        /// 出的牌
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark CardMark {
          get { return cardMark_; }
          set {
            cardMark_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PutCardInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PutCardInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerID != other.PlayerID) return false;
          if (!object.Equals(CardMark, other.CardMark)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
          if (cardMark_ != null) hash ^= CardMark.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerID != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerID);
          }
          if (cardMark_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(CardMark);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
          }
          if (cardMark_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardMark);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PutCardInfo other) {
          if (other == null) {
            return;
          }
          if (other.PlayerID != 0) {
            PlayerID = other.PlayerID;
          }
          if (other.cardMark_ != null) {
            if (cardMark_ == null) {
              cardMark_ = new global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark();
            }
            CardMark.MergeFrom(other.CardMark);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PlayerID = input.ReadInt32();
                break;
              }
              case 18: {
                if (cardMark_ == null) {
                  cardMark_ = new global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark();
                }
                input.ReadMessage(cardMark_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 扑克牌
      /// </summary>
      public sealed partial class Cards : pb::IMessage<Cards> {
        private static readonly pb::MessageParser<Cards> _parser = new pb::MessageParser<Cards>(() => new Cards());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Cards> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cards() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cards(Cards other) : this() {
          cards_ = other.cards_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cards Clone() {
          return new Cards(this);
        }

        /// <summary>Field number for the "Cards" field.</summary>
        public const int Cards_FieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> _repeated_cards_codec
            = pb::FieldCodec.ForMessage(10, global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark.Parser);
        private readonly pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> cards_ = new pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> Cards_ {
          get { return cards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Cards);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Cards other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!cards_.Equals(other.cards_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= cards_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          cards_.WriteTo(output, _repeated_cards_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += cards_.CalculateSize(_repeated_cards_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Cards other) {
          if (other == null) {
            return;
          }
          cards_.Add(other.cards_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                cards_.AddEntriesFrom(input, _repeated_cards_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 玩家倒计时通知
      /// </summary>
      public sealed partial class PlayerTickNotify : pb::IMessage<PlayerTickNotify> {
        private static readonly pb::MessageParser<PlayerTickNotify> _parser = new pb::MessageParser<PlayerTickNotify>(() => new PlayerTickNotify());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerTickNotify> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerTickNotify() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerTickNotify(PlayerTickNotify other) : this() {
          playerID_ = other.playerID_;
          TickMsg = other.tickMsg_ != null ? other.TickMsg.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerTickNotify Clone() {
          return new PlayerTickNotify(this);
        }

        /// <summary>Field number for the "PlayerID" field.</summary>
        public const int PlayerIDFieldNumber = 1;
        private int playerID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerID {
          get { return playerID_; }
          set {
            playerID_ = value;
          }
        }

        /// <summary>Field number for the "TickMsg" field.</summary>
        public const int TickMsgFieldNumber = 2;
        private global::Com.Baiyigame.Godnet.Dummy.DMM.Types.TickMsg tickMsg_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Baiyigame.Godnet.Dummy.DMM.Types.TickMsg TickMsg {
          get { return tickMsg_; }
          set {
            tickMsg_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerTickNotify);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerTickNotify other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerID != other.PlayerID) return false;
          if (!object.Equals(TickMsg, other.TickMsg)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
          if (tickMsg_ != null) hash ^= TickMsg.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerID != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerID);
          }
          if (tickMsg_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(TickMsg);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
          }
          if (tickMsg_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TickMsg);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerTickNotify other) {
          if (other == null) {
            return;
          }
          if (other.PlayerID != 0) {
            PlayerID = other.PlayerID;
          }
          if (other.tickMsg_ != null) {
            if (tickMsg_ == null) {
              tickMsg_ = new global::Com.Baiyigame.Godnet.Dummy.DMM.Types.TickMsg();
            }
            TickMsg.MergeFrom(other.TickMsg);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PlayerID = input.ReadInt32();
                break;
              }
              case 18: {
                if (tickMsg_ == null) {
                  tickMsg_ = new global::Com.Baiyigame.Godnet.Dummy.DMM.Types.TickMsg();
                }
                input.ReadMessage(tickMsg_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 有玩家组牌通知
      /// </summary>
      public sealed partial class BornNotify : pb::IMessage<BornNotify> {
        private static readonly pb::MessageParser<BornNotify> _parser = new pb::MessageParser<BornNotify>(() => new BornNotify());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BornNotify> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BornNotify() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BornNotify(BornNotify other) : this() {
          RoomPlayer = other.roomPlayer_ != null ? other.RoomPlayer.Clone() : null;
          discardCards_ = other.discardCards_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BornNotify Clone() {
          return new BornNotify(this);
        }

        /// <summary>Field number for the "RoomPlayer" field.</summary>
        public const int RoomPlayerFieldNumber = 1;
        private global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer roomPlayer_;
        /// <summary>
        /// 玩家
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer RoomPlayer {
          get { return roomPlayer_; }
          set {
            roomPlayer_ = value;
          }
        }

        /// <summary>Field number for the "DiscardCards" field.</summary>
        public const int DiscardCardsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> _repeated_discardCards_codec
            = pb::FieldCodec.ForMessage(18, global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark.Parser);
        private readonly pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> discardCards_ = new pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark>();
        /// <summary>
        /// 弃牌区中剩余的牌
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.Baiyigame.Godnet.Dummy.DMM.Types.CardMark> DiscardCards {
          get { return discardCards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BornNotify);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BornNotify other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(RoomPlayer, other.RoomPlayer)) return false;
          if(!discardCards_.Equals(other.discardCards_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (roomPlayer_ != null) hash ^= RoomPlayer.GetHashCode();
          hash ^= discardCards_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (roomPlayer_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(RoomPlayer);
          }
          discardCards_.WriteTo(output, _repeated_discardCards_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (roomPlayer_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomPlayer);
          }
          size += discardCards_.CalculateSize(_repeated_discardCards_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BornNotify other) {
          if (other == null) {
            return;
          }
          if (other.roomPlayer_ != null) {
            if (roomPlayer_ == null) {
              roomPlayer_ = new global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer();
            }
            RoomPlayer.MergeFrom(other.RoomPlayer);
          }
          discardCards_.Add(other.discardCards_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (roomPlayer_ == null) {
                  roomPlayer_ = new global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer();
                }
                input.ReadMessage(roomPlayer_);
                break;
              }
              case 18: {
                discardCards_.AddEntriesFrom(input, _repeated_discardCards_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 玩家通知
      /// </summary>
      public sealed partial class PlayerNotify : pb::IMessage<PlayerNotify> {
        private static readonly pb::MessageParser<PlayerNotify> _parser = new pb::MessageParser<PlayerNotify>(() => new PlayerNotify());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerNotify> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerNotify() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerNotify(PlayerNotify other) : this() {
          playerID_ = other.playerID_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerNotify Clone() {
          return new PlayerNotify(this);
        }

        /// <summary>Field number for the "PlayerID" field.</summary>
        public const int PlayerIDFieldNumber = 1;
        private int playerID_;
        /// <summary>
        /// 玩家ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerID {
          get { return playerID_; }
          set {
            playerID_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerNotify);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerNotify other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerID != other.PlayerID) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerID != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerID);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerNotify other) {
          if (other == null) {
            return;
          }
          if (other.PlayerID != 0) {
            PlayerID = other.PlayerID;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PlayerID = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 连牌通知
      /// </summary>
      public sealed partial class LeaveNotify : pb::IMessage<LeaveNotify> {
        private static readonly pb::MessageParser<LeaveNotify> _parser = new pb::MessageParser<LeaveNotify>(() => new LeaveNotify());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LeaveNotify> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaveNotify() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaveNotify(LeaveNotify other) : this() {
          playerID_ = other.playerID_;
          RoomPlayer = other.roomPlayer_ != null ? other.RoomPlayer.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaveNotify Clone() {
          return new LeaveNotify(this);
        }

        /// <summary>Field number for the "PlayerID" field.</summary>
        public const int PlayerIDFieldNumber = 1;
        private int playerID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerID {
          get { return playerID_; }
          set {
            playerID_ = value;
          }
        }

        /// <summary>Field number for the "RoomPlayer" field.</summary>
        public const int RoomPlayerFieldNumber = 2;
        private global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer roomPlayer_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer RoomPlayer {
          get { return roomPlayer_; }
          set {
            roomPlayer_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LeaveNotify);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LeaveNotify other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerID != other.PlayerID) return false;
          if (!object.Equals(RoomPlayer, other.RoomPlayer)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
          if (roomPlayer_ != null) hash ^= RoomPlayer.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerID != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerID);
          }
          if (roomPlayer_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(RoomPlayer);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
          }
          if (roomPlayer_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomPlayer);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LeaveNotify other) {
          if (other == null) {
            return;
          }
          if (other.PlayerID != 0) {
            PlayerID = other.PlayerID;
          }
          if (other.roomPlayer_ != null) {
            if (roomPlayer_ == null) {
              roomPlayer_ = new global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer();
            }
            RoomPlayer.MergeFrom(other.RoomPlayer);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PlayerID = input.ReadInt32();
                break;
              }
              case 18: {
                if (roomPlayer_ == null) {
                  roomPlayer_ = new global::Com.Baiyigame.Godnet.Dummy.DMM.Types.RoomPlayer();
                }
                input.ReadMessage(roomPlayer_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 超时
      /// </summary>
      public sealed partial class OperationTimeout : pb::IMessage<OperationTimeout> {
        private static readonly pb::MessageParser<OperationTimeout> _parser = new pb::MessageParser<OperationTimeout>(() => new OperationTimeout());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OperationTimeout> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OperationTimeout() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OperationTimeout(OperationTimeout other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OperationTimeout Clone() {
          return new OperationTimeout(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OperationTimeout);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OperationTimeout other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OperationTimeout other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

      /// <summary>
      /// 玩家分数变动
      /// </summary>
      public sealed partial class PlayerScoreChange : pb::IMessage<PlayerScoreChange> {
        private static readonly pb::MessageParser<PlayerScoreChange> _parser = new pb::MessageParser<PlayerScoreChange>(() => new PlayerScoreChange());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerScoreChange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Baiyigame.Godnet.Dummy.DMM.Descriptor.NestedTypes[18]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerScoreChange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerScoreChange(PlayerScoreChange other) : this() {
          playerID_ = other.playerID_;
          score_ = other.score_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerScoreChange Clone() {
          return new PlayerScoreChange(this);
        }

        /// <summary>Field number for the "PlayerID" field.</summary>
        public const int PlayerIDFieldNumber = 1;
        private int playerID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerID {
          get { return playerID_; }
          set {
            playerID_ = value;
          }
        }

        /// <summary>Field number for the "Score" field.</summary>
        public const int ScoreFieldNumber = 2;
        private int score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Score {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerScoreChange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerScoreChange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerID != other.PlayerID) return false;
          if (Score != other.Score) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
          if (Score != 0) hash ^= Score.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerID != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerID);
          }
          if (Score != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Score);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
          }
          if (Score != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerScoreChange other) {
          if (other == null) {
            return;
          }
          if (other.PlayerID != 0) {
            PlayerID = other.PlayerID;
          }
          if (other.Score != 0) {
            Score = other.Score;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PlayerID = input.ReadInt32();
                break;
              }
              case 16: {
                Score = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
